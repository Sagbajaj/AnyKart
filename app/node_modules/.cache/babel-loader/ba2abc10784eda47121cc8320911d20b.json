{"ast":null,"code":"import \"../../App.css\";\nimport React, { Component } from 'react';\nimport Header from \"../../components/Header\";\nimport { Link } from 'react-router-dom';\nimport Navigation from \"../../components/Navigation\";\nimport Footer from \"../../components/Footer\";\nimport ApiCustomerService from \"../../services/customer/ApiCustomerService\";\nimport Swal from \"sweetalert2\";\n\nclass LoginScreen extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => this.setState({\n      [e.target.name]: e.target.value\n    });\n\n    this.authenticateUser = e => {\n      e.preventDefault();\n      let loginRequest = {\n        email: this.state.email,\n        password: this.state.password\n      };\n      ApiCustomerService.fetchUserByLoginrequest(loginRequest).then(res => {\n        let user = res.data.result;\n        user == null && this.setState({\n          message: 'Invalid Login Credentials'\n        });\n        user !== null && this.setState({\n          id: user.id,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          phone: user.phone,\n          role: user.role,\n          message: '',\n          cart: []\n        });\n        user != null && Swal.fire({\n          icon: 'success',\n          title: 'Login As ' + user.email + ' Successfully',\n          showConfirmButton: true,\n          confirmButtonText: 'OKAY'\n        });\n        user != null && this.setState({\n          message: 'User Login successfully.'\n        });\n        user != null && window.localStorage.setItem(\"status\", true);\n        user != null && window.localStorage.setItem(\"user_fname\", user.firstName);\n        user != null && window.localStorage.setItem(\"user_lname\", user.lastName);\n        user != null && window.localStorage.setItem(\"user_email\", user.email);\n        user != null && window.localStorage.setItem(\"user_phone\", user.phone);\n        user != null && window.localStorage.setItem(\"user_role\", user.role);\n        user != null && JSON.stringify(window.localStorage.setItem(\"user_id\", user.id));\n        user != null && user.role === 'CUSTOMER' && this.updateUserCart();\n        user != null && user.role === 'SUPPLIER' && this.props.history.push('/supplierhome');\n        user != null && user.role === 'DELIVERY_BOY' && this.props.history.push('/deliveryboyhome');\n        user != null && user.role === 'ADMIN' && this.props.history.push('/adminhome');\n        user != null && user.role === 'CUSTOMER' && this.props.history.push('/home');\n      });\n    };\n\n    this.state = {\n      id: '',\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      phone: '',\n      role: '',\n      message: ''\n    };\n    this.authenticateUser = this.authenticateUser.bind(this);\n    this.getCartSize = this.getCartSize.bind(this);\n    this.updateUserCart = this.updateUserCart.bind(this);\n  }\n\n  getCartSize() {\n    setTimeout(() => {\n      ApiCustomerService.getCartByUserId(JSON.parse(window.localStorage.getItem(\"user_id\"))).then(res => {\n        JSON.stringify(window.localStorage.setItem(\"cart_size\", res.data.result.length));\n      });\n    }, 1000);\n  }\n\n  updateUserCart() {\n    let cartUserId = JSON.parse(window.localStorage.getItem(\"user_id\"));\n    let cartSize = JSON.parse(window.localStorage.getItem(\"cart_size\"));\n\n    if (cartSize > 0) {\n      ApiCustomerService.updateCartUserId(cartUserId);\n    }\n\n    this.getCartSize();\n  }\n\n  render() {\n    return (//   <div>\n      //      <Navigation/>\n      //      <div className=\"main\">\n      //    <Header title=\"Login\" />\n      //    <br/>\n      //    <h5 className=\"nameColor1\">{this.state.message}</h5>\n      //    <form>\n      //      <form className=\"mb-3\">\n      //        <label className=\"form-label\">Email</label>\n      //        <input \n      //          type=\"email\"\n      //          className=\"form-control\"\n      //          placeholder=\"name@gmail.com\"\n      //          name=\"email\"\n      //          value={this.state.email}\n      //          onChange={this.onChange}\n      //        />\n      //      </form>\n      //      <div className=\"mb-3\">\n      //        <label className=\"form-label\">Password</label>\n      //        <input\n      //          type=\"password\"\n      //          className=\"form-control\"\n      //          placeholder=\"*****\" \n      //          name=\"password\"\n      //          value={this.state.password}\n      //          onChange={this.onChange}>                \n      //          </input>\n      //      </div>\n      //      <div className=\"mb-3\">\n      //        <br />\n      //        <div className=\"float-start\"><br></br>\n      //          New User? <Link to=\"/create-account\">Create Account here</Link>\n      //        </div>\n      //        <button className=\"btn-hover color-9 float-end\" onClick={this.authenticateUser}>\n      //          Login\n      //        </button>\n      //        <br></br>\n      //      </div>\n      //      </form>\n      //  </div>\n      //   </div>\n      Swal.fire({\n        title: 'Login Form',\n        html: `<input type=\"text\" id=\"login\" class=\"swal2-input\" placeholder=\"Username\">\n        <input type=\"password\" id=\"password\" class=\"swal2-input\" placeholder=\"Password\">`,\n        confirmButtonText: 'Sign in',\n        focusConfirm: false,\n        preConfirm: () => {\n          const login = Swal.getPopup().querySelector('#login').value;\n          const password = Swal.getPopup().querySelector('#password').value;\n\n          if (!login || !password) {\n            Swal.showValidationMessage(`Please enter login and password`);\n          }\n\n          return {\n            login: login,\n            password: password\n          };\n        }\n      }).then(result => {\n        Swal.fire(`\n          Login: ${result.value.login}\n          Password: ${result.value.password}\n        `.trim());\n      })\n    );\n  }\n\n}\n\nexport default LoginScreen;","map":{"version":3,"sources":["D:/Project/EKart/AnyKart/app/src/screens/common/LoginScreen.js"],"names":["React","Component","Header","Link","Navigation","Footer","ApiCustomerService","Swal","LoginScreen","constructor","props","onChange","e","setState","target","name","value","authenticateUser","preventDefault","loginRequest","email","state","password","fetchUserByLoginrequest","then","res","user","data","result","message","id","firstName","lastName","phone","role","cart","fire","icon","title","showConfirmButton","confirmButtonText","window","localStorage","setItem","JSON","stringify","updateUserCart","history","push","bind","getCartSize","setTimeout","getCartByUserId","parse","getItem","length","cartUserId","cartSize","updateCartUserId","render","html","focusConfirm","preConfirm","login","getPopup","querySelector","showValidationMessage","trim"],"mappings":"AAAA,OAAO,eAAP;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,kBAAP,MAA+B,4CAA/B;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAMA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAElCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiBrBC,QAjBqB,GAiBTC,CAAD,IACH,KAAKC,QAAL,CAAc;AAAE,OAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AAA5B,KAAd,CAlBa;;AAAA,SAqCfC,gBArCe,GAqCKL,CAAD,IAAO;AACxBA,MAAAA,CAAC,CAACM,cAAF;AACA,UAAIC,YAAY,GAAG;AAACC,QAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,KAAnB;AAA0BE,QAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC;AAA/C,OAAnB;AACAhB,MAAAA,kBAAkB,CAACiB,uBAAnB,CAA2CJ,YAA3C,EACDK,IADC,CACIC,GAAG,IAAI;AACX,YAAIC,IAAI,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAApB;AACAF,QAAAA,IAAI,IAAI,IAAR,IAAgB,KAAKb,QAAL,CAAc;AAACgB,UAAAA,OAAO,EAAG;AAAX,SAAd,CAAhB;AACAH,QAAAA,IAAI,KAAK,IAAT,IAAiB,KAAKb,QAAL,CAAc;AAC/BiB,UAAAA,EAAE,EAAEJ,IAAI,CAACI,EADsB;AAE/BC,UAAAA,SAAS,EAAEL,IAAI,CAACK,SAFe;AAG/BC,UAAAA,QAAQ,EAAEN,IAAI,CAACM,QAHgB;AAI/BZ,UAAAA,KAAK,EAAEM,IAAI,CAACN,KAJmB;AAK/Ba,UAAAA,KAAK,EAAEP,IAAI,CAACO,KALmB;AAM/BC,UAAAA,IAAI,EAAER,IAAI,CAACQ,IANoB;AAO/BL,UAAAA,OAAO,EAAC,EAPuB;AAQ/BM,UAAAA,IAAI,EAAC;AAR0B,SAAd,CAAjB;AAWET,QAAAA,IAAI,IAAI,IAAR,IAAgBnB,IAAI,CAAC6B,IAAL,CAAU;AACxBC,UAAAA,IAAI,EAAE,SADkB;AAExBC,UAAAA,KAAK,EAAE,cAAYZ,IAAI,CAACN,KAAjB,GAAuB,eAFN;AAGxBmB,UAAAA,iBAAiB,EAAE,IAHK;AAIxBC,UAAAA,iBAAiB,EAAE;AAJK,SAAV,CAAhB;AAMAd,QAAAA,IAAI,IAAI,IAAR,IAAgB,KAAKb,QAAL,CAAc;AAACgB,UAAAA,OAAO,EAAG;AAAX,SAAd,CAAhB;AACAH,QAAAA,IAAI,IAAI,IAAR,IAAgBe,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,QAA5B,EAAsC,IAAtC,CAAhB;AACAjB,QAAAA,IAAI,IAAI,IAAR,IAAgBe,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CjB,IAAI,CAACK,SAA/C,CAAhB;AACAL,QAAAA,IAAI,IAAI,IAAR,IAAgBe,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CjB,IAAI,CAACM,QAA/C,CAAhB;AACAN,QAAAA,IAAI,IAAI,IAAR,IAAgBe,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CjB,IAAI,CAACN,KAA/C,CAAhB;AACAM,QAAAA,IAAI,IAAI,IAAR,IAAgBe,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,EAA0CjB,IAAI,CAACO,KAA/C,CAAhB;AACAP,QAAAA,IAAI,IAAI,IAAR,IAAgBe,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,EAAyCjB,IAAI,CAACQ,IAA9C,CAAhB;AAEAR,QAAAA,IAAI,IAAI,IAAR,IAAgBkB,IAAI,CAACC,SAAL,CAAeJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,SAA5B,EAAuCjB,IAAI,CAACI,EAA5C,CAAf,CAAhB;AACAJ,QAAAA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACQ,IAAL,KAAc,UAA9B,IAA4C,KAAKY,cAAL,EAA5C;AACApB,QAAAA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACQ,IAAL,KAAc,UAA9B,IAA4C,KAAKxB,KAAL,CAAWqC,OAAX,CAAmBC,IAAnB,CAAwB,eAAxB,CAA5C;AACAtB,QAAAA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACQ,IAAL,KAAc,cAA9B,IAAgD,KAAKxB,KAAL,CAAWqC,OAAX,CAAmBC,IAAnB,CAAwB,kBAAxB,CAAhD;AACAtB,QAAAA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACQ,IAAL,KAAc,OAA9B,IAAyC,KAAKxB,KAAL,CAAWqC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB,CAAzC;AACAtB,QAAAA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACQ,IAAL,KAAc,UAA9B,IAA4C,KAAKxB,KAAL,CAAWqC,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB,CAA5C;AACH,OAnCC;AAoCP,KA5EoB;;AAEjB,SAAK3B,KAAL,GAAY;AACVS,MAAAA,EAAE,EAAE,EADM;AAEVC,MAAAA,SAAS,EAAE,EAFD;AAGVC,MAAAA,QAAQ,EAAE,EAHA;AAIVZ,MAAAA,KAAK,EAAE,EAJG;AAKVE,MAAAA,QAAQ,EAAE,EALA;AAMVW,MAAAA,KAAK,EAAE,EANG;AAOVC,MAAAA,IAAI,EAAE,EAPI;AAQVL,MAAAA,OAAO,EAAE;AARC,KAAZ;AAUA,SAAKZ,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBgC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKH,cAAL,GAAsB,KAAKA,cAAL,CAAoBG,IAApB,CAAyB,IAAzB,CAAtB;AACH;;AAKOC,EAAAA,WAAW,GAAE;AACXC,IAAAA,UAAU,CAAC,MAAM;AACf7C,MAAAA,kBAAkB,CAAC8C,eAAnB,CAAmCR,IAAI,CAACS,KAAL,CAAWZ,MAAM,CAACC,YAAP,CAAoBY,OAApB,CAA4B,SAA5B,CAAX,CAAnC,EACD9B,IADC,CACKC,GAAD,IAAS;AACXmB,QAAAA,IAAI,CAACC,SAAL,CAAeJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,EAAyClB,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgB2B,MAAzD,CAAf;AACH,OAHC;AAGG,KAJK,EAIH,IAJG,CAAV;AAMD;;AAEDT,EAAAA,cAAc,GAAE;AACd,QAAIU,UAAU,GAAGZ,IAAI,CAACS,KAAL,CAAWZ,MAAM,CAACC,YAAP,CAAoBY,OAApB,CAA4B,SAA5B,CAAX,CAAjB;AACA,QAAIG,QAAQ,GAAGb,IAAI,CAACS,KAAL,CAAWZ,MAAM,CAACC,YAAP,CAAoBY,OAApB,CAA4B,WAA5B,CAAX,CAAf;;AACA,QAAGG,QAAQ,GAAG,CAAd,EAAiB;AACfnD,MAAAA,kBAAkB,CAACoD,gBAAnB,CAAoCF,UAApC;AACD;;AACD,SAAKN,WAAL;AACD;;AA2CLS,EAAAA,MAAM,GAAE;AACN,WACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACApD,MAAAA,IAAI,CAAC6B,IAAL,CAAU;AACRE,QAAAA,KAAK,EAAE,YADC;AAERsB,QAAAA,IAAI,EAAG;AACf,yFAHgB;AAIRpB,QAAAA,iBAAiB,EAAE,SAJX;AAKRqB,QAAAA,YAAY,EAAE,KALN;AAMRC,QAAAA,UAAU,EAAE,MAAM;AAChB,gBAAMC,KAAK,GAAGxD,IAAI,CAACyD,QAAL,GAAgBC,aAAhB,CAA8B,QAA9B,EAAwCjD,KAAtD;AACA,gBAAMM,QAAQ,GAAGf,IAAI,CAACyD,QAAL,GAAgBC,aAAhB,CAA8B,WAA9B,EAA2CjD,KAA5D;;AACA,cAAI,CAAC+C,KAAD,IAAU,CAACzC,QAAf,EAAyB;AACvBf,YAAAA,IAAI,CAAC2D,qBAAL,CAA4B,iCAA5B;AACD;;AACD,iBAAO;AAAEH,YAAAA,KAAK,EAAEA,KAAT;AAAgBzC,YAAAA,QAAQ,EAAEA;AAA1B,WAAP;AACD;AAbO,OAAV,EAcGE,IAdH,CAcSI,MAAD,IAAY;AAClBrB,QAAAA,IAAI,CAAC6B,IAAL,CAAW;AACnB,mBAAmBR,MAAM,CAACZ,KAAP,CAAa+C,KAAM;AACtC,sBAAsBnC,MAAM,CAACZ,KAAP,CAAaM,QAAS;AAC5C,SAHkB,CAGR6C,IAHQ,EAAV;AAID,OAnBD;AA5CA;AAiED;;AAnJ+B;;AAqJpC,eAAe3D,WAAf","sourcesContent":["import \"../../App.css\"\r\nimport React, { Component } from 'react'\r\nimport Header from \"../../components/Header\"\r\nimport {Link} from 'react-router-dom'\r\nimport Navigation from \"../../components/Navigation\";\r\nimport Footer from \"../../components/Footer\";\r\nimport ApiCustomerService from \"../../services/customer/ApiCustomerService\";\r\nimport Swal from \"sweetalert2\";\r\n\r\n\r\n\r\n\r\n\r\nclass LoginScreen extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state ={\r\n      id: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      password: '',\r\n      phone: '',\r\n      role: '', \r\n      message: '',\r\n  }\r\n    this.authenticateUser = this.authenticateUser.bind(this);\r\n    this.getCartSize = this.getCartSize.bind(this);\r\n    this.updateUserCart = this.updateUserCart.bind(this);\r\n}\r\n\r\nonChange = (e) =>\r\n        this.setState({ [e.target.name]: e.target.value });\r\n\r\n        getCartSize(){\r\n          setTimeout(() => { \r\n            ApiCustomerService.getCartByUserId(JSON.parse(window.localStorage.getItem(\"user_id\")))\r\n          .then((res) => {\r\n              JSON.stringify(window.localStorage.setItem(\"cart_size\", res.data.result.length) );\r\n          }); }, 1000);\r\n          \r\n        }\r\n\r\n        updateUserCart(){\r\n          let cartUserId = JSON.parse(window.localStorage.getItem(\"user_id\"));\r\n          let cartSize = JSON.parse(window.localStorage.getItem(\"cart_size\"));\r\n          if(cartSize > 0 ){\r\n            ApiCustomerService.updateCartUserId(cartUserId);\r\n          }\r\n          this.getCartSize();\r\n        }\r\n      authenticateUser = (e) => {\r\n        e.preventDefault();\r\n        let loginRequest = {email: this.state.email, password: this.state.password};\r\n        ApiCustomerService.fetchUserByLoginrequest(loginRequest)\r\n      .then(res => {\r\n        let user = res.data.result;\r\n        user == null && this.setState({message : 'Invalid Login Credentials'});\r\n        user !== null && this.setState({\r\n        id: user.id,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n        phone: user.phone,\r\n        role: user.role,\r\n        message:'',\r\n        cart:[],\r\n        })\r\n          \r\n          user != null && Swal.fire({\r\n            icon: 'success',\r\n            title: 'Login As '+user.email+' Successfully',\r\n            showConfirmButton: true,\r\n            confirmButtonText: 'OKAY',\r\n          })\r\n          user != null && this.setState({message : 'User Login successfully.'});\r\n          user != null && window.localStorage.setItem(\"status\", true);\r\n          user != null && window.localStorage.setItem(\"user_fname\", user.firstName);\r\n          user != null && window.localStorage.setItem(\"user_lname\", user.lastName);\r\n          user != null && window.localStorage.setItem(\"user_email\", user.email);\r\n          user != null && window.localStorage.setItem(\"user_phone\", user.phone);\r\n          user != null && window.localStorage.setItem(\"user_role\", user.role);\r\n\r\n          user != null && JSON.stringify(window.localStorage.setItem(\"user_id\", user.id));        \r\n          user != null && user.role === 'CUSTOMER' && this.updateUserCart();\r\n          user != null && user.role === 'SUPPLIER' && this.props.history.push('/supplierhome');\r\n          user != null && user.role === 'DELIVERY_BOY' && this.props.history.push('/deliveryboyhome');\r\n          user != null && user.role === 'ADMIN' && this.props.history.push('/adminhome');\r\n          user != null && user.role === 'CUSTOMER' && this.props.history.push('/home');\r\n      });\r\n}\r\n\r\n\r\n    render(){\r\n      return (\r\n      //   <div>\r\n      //      <Navigation/>\r\n      //      <div className=\"main\">\r\n      //    <Header title=\"Login\" />\r\n      //    <br/>\r\n      //    <h5 className=\"nameColor1\">{this.state.message}</h5>\r\n      //    <form>\r\n      //      <form className=\"mb-3\">\r\n      //        <label className=\"form-label\">Email</label>\r\n      //        <input \r\n      //          type=\"email\"\r\n      //          className=\"form-control\"\r\n      //          placeholder=\"name@gmail.com\"\r\n      //          name=\"email\"\r\n      //          value={this.state.email}\r\n      //          onChange={this.onChange}\r\n      //        />\r\n      //      </form>\r\n      //      <div className=\"mb-3\">\r\n      //        <label className=\"form-label\">Password</label>\r\n      //        <input\r\n      //          type=\"password\"\r\n      //          className=\"form-control\"\r\n      //          placeholder=\"*****\" \r\n      //          name=\"password\"\r\n      //          value={this.state.password}\r\n      //          onChange={this.onChange}>                \r\n      //          </input>\r\n      //      </div>\r\n      //      <div className=\"mb-3\">\r\n      //        <br />\r\n      //        <div className=\"float-start\"><br></br>\r\n      //          New User? <Link to=\"/create-account\">Create Account here</Link>\r\n      //        </div>\r\n      //        <button className=\"btn-hover color-9 float-end\" onClick={this.authenticateUser}>\r\n      //          Login\r\n      //        </button>\r\n      //        <br></br>\r\n \r\n      //      </div>\r\n      //      </form>\r\n      //  </div>\r\n      //   </div>\r\n      Swal.fire({\r\n        title: 'Login Form',\r\n        html: `<input type=\"text\" id=\"login\" class=\"swal2-input\" placeholder=\"Username\">\r\n        <input type=\"password\" id=\"password\" class=\"swal2-input\" placeholder=\"Password\">`,\r\n        confirmButtonText: 'Sign in',\r\n        focusConfirm: false,\r\n        preConfirm: () => {\r\n          const login = Swal.getPopup().querySelector('#login').value\r\n          const password = Swal.getPopup().querySelector('#password').value\r\n          if (!login || !password) {\r\n            Swal.showValidationMessage(`Please enter login and password`)\r\n          }\r\n          return { login: login, password: password }\r\n        }\r\n      }).then((result) => {\r\n        Swal.fire(`\r\n          Login: ${result.value.login}\r\n          Password: ${result.value.password}\r\n        `.trim())\r\n      })\r\n     );\r\n    }   \r\n}\r\nexport default LoginScreen"]},"metadata":{},"sourceType":"module"}